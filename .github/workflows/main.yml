name: Get ServiceNow Change Details

on:
  push:
    branches: [ main ]  # Ou workflow_dispatch pour tester manuellement

jobs:
  get-change-details:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Change Request Number
        id: get-change  # ID pour référencer les outputs
        uses: ServiceNow/servicenow-devops-get-change@v5.1.0
        with:
          devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}  # Ton user dédié (ex. github-devops-user)
          devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}  # ex. https://louisvuittondev.service-now.com
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}  # Sys_id de ton intégration custom
          context-github: ${{ toJSON(github) }}
          change-details: '{"build_number":"1","pipeline_name":"ARGOCD_Deployment","stage_name":"Get_Change","attempt_number":"1"}'  # Adaptez aux détails pour matcher un change existant

      - name: Fetch Full Change Details via API
        id: fetch-details
        run: |
          CHANGE_NUMBER=${{ steps.get-change.outputs.change-request-number }}
          if [ -z "$CHANGE_NUMBER" ]; then
            echo "No change number found."
            exit 1
          fi
          RESPONSE=$(curl -s -u "${{ secrets.SN_DEVOPS_USER }}:${{ secrets.SN_DEVOPS_PASSWORD }}" \
            "${{ secrets.SN_INSTANCE_URL }}/api/now/table/change_request?sysparm_query=number=CHG0032891&sysparm_fields=number%2Cjustification%2Cstart_date%2Ccmdb_ci%2Cbusiness_service%2Cversion%2Cstate" \
            -H "Accept: application/json")
          echo "response=$RESPONSE" >> $GITHUB_OUTPUT  # Stocke la réponse JSON en output

      - name: Display Change Details
        run: |
          echo "Change Details: ${{ steps.fetch-details.outputs.response }}"
          # Parse et affiche des champs spécifiques si besoin, ex. via jq si installé
